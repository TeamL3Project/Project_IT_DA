<<<<<<< HEAD
<context>
	<Resource
		name = "jdbc/OracleDB"
		auth = "container"
		type = "javax.sql.DataSource"
		username = "itda"	
		password = "itda123!"
		driverClassName = "oracle.jdbc.driver.OracleDriver"
		factory = "org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory"
		url="jdbc:oracle:thin:@175.192.130.123:1521:XE"
		/>
</context>
<!-- 
	1.name="jdbc/OracleDB"
	  JNDI로 호출될 이름을 설정하는 곳으로 임의로 이름 설정 가능합니다.
	  dbcpAPITest.jsp의 init.lookup("java:cmop/env/jdbc/OracleDB");
	  lookup() 메서드로 여기서 설정한 이름을 찾스니다.
	  
	2.auth="Container"
	  DBCP를 관리할 관리자(Container or Application)로 컨테이너인 톰캣이 관리함
	  
	3.type='javax.sql.DataSource"
	  1번 resource의 treurn type이 DataSource라는 의미이며 Connerxtion 객체를 반환할 수 있습니다.
	  예) DataSource ds = (DataSource) init.lookup("java:comp/env/jdbc/OracleDB");
	  
	4.usernae="scott" (DB의 계정명)
	
	5.password="tiger" (계정에 대한 비밀번호)
	
	6.driverClassName = "oracle.jdbc.driver.OracleDriver"
	  오라클드라이버 이름(JDBC를 이용하기 위한 드라이버 클래스 입니다.)
	
	7.factory = "org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory"
	  dbcp를 관리하는 클래스로 Factory 클래스를 이용하면 좀 더 안정적으로 관리 가능
	
	8.url="jdbc:oracle:thin:@127.0.0.1:1521:xe"
	  DB의 접속 URL입니다.
 -->
=======
<Context>
  <Resource 
   name="jdbc/OracleDB" 
   auth="Container"
   type="javax.sql.DataSource" 
   username="itda" 
   password="itda123!"
   driverClassName="oracle.jdbc.driver.OracleDriver"
   factory="org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory"
   url="jdbc:oracle:thin:@175.192.130.123:1521/xe"
  /> 
</Context>
>>>>>>> 007bf902c0c6857856f80df95d86739efd1a865d
